#+title: break and continue
#+author: Nick Martin
#+email: nmartin84@gmail.com
#+created: [2021-01-17 20:18]

These statements add more functionality to your [[[[file:../202101021249-python_control_structures.org][python control structures]]]]

- break: Breaks out of the current closes loop
- continue: Goes to hte top of the closest loop
- pass: Does nothing at all

The pass keyword helps if you need to build out your loop condition, but
want to save it for later...

#+begin_src python :results code output :exports both
  x = [1,2,3]
  for item in x:
      pass
#+end_src

The closest statement basically tells python to skip the current cycle
and go back to the beginning of the sequence, while skipping the result
if it matches your condition.

#+begin_src python :results code output :exports both
  x = 'Sammy'
  for letters in x:
      if letters == 'a':
          continue
      print(letters)
#+end_src

The break statement is a little different, if the conditon you're
searhcing for returns true and you have a break statement, python will
break out of that loop and move to the next piece of code:

#+begin_src python :results code output :exports both
  x = 'Sammy'
  for letters in x:
      if letters == 'a':
          break
      print(letters)
#+end_src
