#+title: lists
#+author: Nick Martin
#+email: nmartin84@gmail.com
#+created: [2021-01-17 20:08]

Lists is a common [[[[file:../202101171358-python_datatypes.org][python datatypes]]]], which are enclosed in =[]=, *double quotes*
for strings =,= to sepearte our indexes and yes, indexes to call different index
slots of our list.

#+BEGIN_EXAMPLE
  list = [1, 2, "test", "data", "my string"]
  print(list[2])
#+END_EXAMPLE

* List Methods
- *append():* Adds an element at the end of the list
- *clear():* Removes all the elements from the list
- *copy():* Returns a copy of the list
- *count():* Returns the number of elements with the specified value
- *extend():* Add the elements of a list (or any iterable), to the end
  of the current list
- *index():* Returns the index of the first element with the specified
  value
- *insert():* Adds an element at the specified position
- *pop():* Removes the element at the specified position
- *remove():* Removes the item with the specified value
- *reverse():* Reverses the order of the list
- *sort():* Sorts the list

* Lists indexes
Since these are stored at indexes, you can change parts of your list by calling
the index number and then assigning it to a new value.

#+BEGIN_EXAMPLE
  list = ["list" "free data" "hello world" "my name is "]
  list[0] = "last"
  list

  # You can also use negative indexing
  list[-1]
  # last
#+END_EXAMPLE

* Lists Ranges

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]
  print(thislist[2:5])

  #This will return the items from position 2 to 5.

  #Remember that the first item is position 0,
  #and note that the item in position 5 is NOT included
#+END_EXAMPLE

* Check if data exist in Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  if "apple" in thislist:
    print("Yes, 'apple' is in the fruits list")
#+END_EXAMPLE

* Change lists data at index

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist[1] = "blackcurrant"
  print(thislist)

  # Change the second value by replacing it with two new values:
  thislist = ["apple", "banana", "cherry"]
  thislist[1] = ["blackcurrant", "watermelon"]
  print(thislist)

  # Cahnge a range of items
  thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
  thislist[1:3] = ["blackcurrant", "watermelon"]
  print(thislist)
#+END_EXAMPLE

* Insert after index retaining existing data

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist.insert(2, "watermelon")
  print(thislist)
#+END_EXAMPLE

* Append to end of Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist.append("orange")
  print(thislist)
#+END_EXAMPLE

* Insert item to Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist.insert(1, "orange")
  print(thislist)
#+END_EXAMPLE

* Remove item from Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist.remove("banana")
  print(thislist)
#+END_EXAMPLE

* Pop removes item from Lists
Another method is =.pop=, which will pop off the last value of the list and return
it.

#+BEGIN_EXAMPLE
  list = ["first" "second"]
  list.pop()
  # If you do not specify the index, the pop() method removes the last item.

  # alternatively you can pass the index number you want to pop
  list.pop(0)
#+END_EXAMPLE

* Using Del to remove from Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  del thislist[0]
  print(thislist)

  # Can also delete the entire lists
  thislist = ["apple", "banana", "cherry"]
  del thislist
#+END_EXAMPLE

* Clear Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  thislist.clear()
  print(thislist)
#+END_EXAMPLE

* Loop through Lists

#+BEGIN_EXAMPLE
  wlist = [2,4,5,6,7,8]
  index = 0

  # One way is using pop if you want pull everything out of the list, this is destructive though.
  while len(wlist) > 0:
      print(list.pop(wlist))

  # Another way is incrementing the index ingeger until it's higher than the length of the variable name.
  while index < len(wlist):
      index = index + 1
      print(wlist)

  thislist = ["apple", "banana", "cherry"]
  for x in thislist:
    print(x)

  # Loop through index numbers
  thislist = ["apple", "banana", "cherry"]
  for i in range(len(thislist)):
    print(thislist[i])

  # List Comprehensive offers the shortest syntax for looping through lists:
  thislist = ["apple", "banana", "cherry"]
  [print x for x in thislist]
#+END_EXAMPLE

* List Comprehension
List comprehension, basically just allows you to write out your code in one line
inside =[]= brackets. The layout looks a little something like this =[expression
for item in list]=.

#+BEGIN_SRC python
  newlist = [x for x in fruits if "a" in x]
  print(newlist)

  # With no if statement
  newlist = [x for x in fruits]

  # Using a range()
  newlist = [x for x in range(10)]

  # Accept only numbers less than
  newlist = [x for x in range(10) if x < 5]
#+END_SRC

* Copy Lists

#+BEGIN_EXAMPLE
  thislist = ["apple", "banana", "cherry"]
  mylist = thislist.copy()
  print(mylist)

  # Example using the list() function
  thislist = ["apple", "banana", "cherry"]
  mylist = list(thislist)
  print(mylist)
#+END_EXAMPLE

* Join Lists

#+BEGIN_EXAMPLE
  list1 = ["a", "b", "c"]
  list2 = [1, 2, 3]

  list3 = list1 + list2
  print(list3)

  # Alternatively use a for loop with append
  list1 = ["a", "b" , "c"]
  list2 = [1, 2, 3]

  for x in list2:
    list1.append(x)

  print(list1)

  # Lastly use the extend() function
  list1 = ["a", "b" , "c"]
  list2 = [1, 2, 3]

  list1.extend(list2)
  print(list1)
#+END_EXAMPLE

* Extend List with another list

thislist = ["apple", "banana", "cherry"] tropical = ["mango",
"pineapple", "papaya"] thislist.extend(tropical) print(thislist)

thislist = ["apple", "banana", "cherry"] thistuple = ("kiwi", "orange")
thislist.extend(thistuple) print(thislist)

* Lists can hold multiple data types

#+BEGIN_EXAMPLE
  list1 = ["abc", 34, True, 40, "male"]
#+END_EXAMPLE

* Append to Lists
You can also append new data to a list by using the =.append= method.

#+BEGIN_EXAMPLE
  list = ["my list"]
  list.append("data")
  return(list)
#+END_EXAMPLE

* Sort Lists
There's also the =.reverse= method, which like sort, will reverse sort your list.

#+BEGIN_EXAMPLE
  thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
  thislist.sort()
  print(thislist)

  # Reversing the order
  thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
  thislist.sort(reverse = True)
  print(thislist)

  thislist = ["banana", "Orange", "Kiwi", "cherry"]
  thislist.reverse()
  print(thislist)

  # Sorting by lower case characters first
  thislist = ["banana", "Orange", "Kiwi", "cherry"]
  thislist.sort(key = str.lower)
  print(thislist)
#+END_EXAMPLE
