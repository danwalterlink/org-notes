#+title: python
#+author: Nick Martin
#+email: nmartin84@gmail.com
#+created: [2021-01-17 13:20]

Python is a [[[[file:../202101161003-programming_language.org][programming language]]]], that's heavily focused on
[[[[file:../202101171440-object_oriented_programming.org][object-oriented programming]]]].

Online Sources:
- https://www.codecademy.com/learn/learn-python-3
- https://en.wikibooks.org/wiki/Python_Programming
- https://www.sololearn.com/Course/Python/

#+BEGIN_QUOTE
For a large programming project to be successful, it is essential to abide by
the Don't Repeat Yourself, or DRY, principle. We've already looked at one way of
doing this: by using loops. In this module, we will explore two more: functions
and modules.
#+END_QUOTE

* Syntax
Python is super easy compared to most other languages when it comes to syntax,
there's no crazy brackets, parenthesis, or other things you need to enclosure
expressions or statements in. But instead, it's mostly off of indentation.

#+BEGIN_SRC python
if 5 > 2:
    print("Five is greater than two.")
#+END_SRC
* Indexing and Slicing

Indexing is essentially accessing a specific value, or row that's contained
inside an object. For instance, say you have a list and you wanted to access the
3rd value in that list.

#+begin_src python :results code output :exports both
my_list = ["david", "jenny", "alfred"]
print(my_list[1])
#+end_src

#+RESULTS:
#+begin_src python
jenny
#+end_src

This can change as the datatype you are trying to access changes, so here's a
breakdown of how to use indexing with each datatype in Python.

#+begin_src python :results code output :exports both
my_list = ["david", "jenny", "alfred"]
my_tuples = ("jack", "robert", "billy")
my_dict = {1:"david", 2:"jack", 3:"george"}
my_string = "mystring"
my_set = {"apple", "cherry", "chocolate"}

print(f'My list item at index 1 is: {my_list[1]}\nMy tuple at index 1 is: {my_tuples[1]}\nMy dictionary value at index 2: {my_dict[2]}\nMy string at index 0: {my_string[0]}\nMy set values: {my_set}')
#+end_src

#+RESULTS:
#+begin_src python
My list item at index 1 is: jenny
My tuple at index 1 is: robert
My dictionary value at index 2: jack
My string at index 0: m
My set values: {'cherry', 'chocolate', 'apple'}
#+end_src

* Casting

The user explicitly changes the data type from one to another.

* Data Types

There are five collection data type in the python programming language:
- [[lists]] :: is a collection which is ordered and changeable. Allows duplicate
  members, lists are enclosed in =[]=.
- [[tuples]] :: is a collection which is ordered and un-changeable. Allows duplicate
  members, tuples are written with =()=.
- [[sets]] :: is a collection which is unordered and un-indexed. No duplicate
  members are allowed, sets are written in ={}=.
- [[dictionaries]] :: is a collection which is unordered, changeable and indexed. No
  duplicate members, dictionaries are written in squigly brackets with key:value
  pairs ={key:value}=.
- [[strings]] :: are basically quoted characters that are treated verbatim, and are
  enclosed in =""=.

** lists

Lists are comprised of values enclosed in square brackets =[]=.

** tuples

** sets

** dictionaries

** strings
* Operators

Python uses operators to apply different operations on values, such as
comparison or arithmetic type, and more. The following operators exist in
python:
- [[arithmetic operators]]
- [[assignment operators]]
- [[bitwise operators]]
- [[comparison operators]]
- [[identity operators]]
- [[logical operators]]
- [[membership operators]]

The most basic use of an operator in python is something like so:
#+begin_src python :results code output :exports both
x = 3 + 3
y = 5
my_string = 'Red Dog'

if 6 == x:
    print("x is 6")
    if x > y:
        print("x is also greater than y")

if 'Red' in my_string:
    print('Red is in string')
#+end_src

#+RESULTS:
#+begin_src python
x is 6
x is also greater than y
Red is in string
#+end_src

** arithmetic operators
Arithmetic operators for [[[file:../202101171320-python.org][python]]] are used with numeric values to perform common
mathematical operations:
- ~+~ :: Addition =x + y=
- ~-~ :: Subtraction =x - y=
- ~*~ :: Multiplication =x * y=
- ~%~ :: Modulus =x % y=
- ~**~ :: Exponentiation =x ** y=
- ~//~ :: Floor Division =x // y=
** assignment operators
Assignment operators for [[[file:../202101171320-python.org][python]]] are used to assign values to variables:
- = :: for example =x = 5= is the same as =x = 5=
- += :: for example =x +=3= is the same as =x = x + 3=
- -= :: for example =x -= 3= is the same as =x = x - 3=
** bitwise operators
Bitwise operators for [[[[file:../202101171320-python.org][python]]]] are used to compare (binary) numbers:
- ~&~ :: Sets each bits to 1 if both are 1.
- ~|~ :: Sets each bit to 1 if one of two bits is 1
- ~^~ :: Sets each bit to 1 if only one of two bits is 1
- ~~~ :: Inverts all the bits
- ~<<~ :: Shift left by pushing zeros in from the right and let the leftmost bits fall off
- ~>>~ :: Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off
** comparison operators
The comparison operators for [[[file:../202101171320-python.org][python]]] compare the values on either sides of them
and decide the relation among them. They are also called Relational operators:
- ~==~ :: If the values of the 2 arguments are equal, return true.
- ~!=~ :: If the values of the 2 arguments are _NOT_ equal, return false.
- ~<>~ :: If values of the 2 arguemnts are NOT equal, return true.
- ~>~ :: Returns true if the 1st argument is greater than the second argument.
- ~<~ :: Returns false if the 1st argument is less than the second argument.
- ~>=~ :: Returns true if the 1st argument is greater than or equal to the second argument.
- ~<=~ :: Returns false if the 1st argument is less than or equal to the second argument.
** identity operators
Identity operators for [[[file:../202101171320-python.org][python]]] are used to compare the objects, not if they are
equal, but if they are actually the same object, with the same memory location:

- is :: returns true if both variables are the same.
- is not :: returns true if both variables are not the same.
** logical operators
The logical operators for [[[file:../202101171320-python.org][python]]] are used to combine conditional statements:
- AND :: operator returns true when both evaluations return 1 or true.
- OR :: operator return true when one of the evaluations return 1 or true.
- NOT :: operator will return false if both evaluations return 1 or true.
** membership operators
Membership [[[file:../202101171320-python.org][python]]] are used to test if a sequence is presented in an object:
- in :: returns true if a sequence with the specified value is present in the object.
- not in :: returns true if a sequence with the specified value is not present in
  the object.
* Interpreter

- Interprets the code we give it, usually from a .py file with instructions to run.
- Normally installed under =/usr/local/bin/python3.9=

* Keywords

Python has a set of keywords that are reserved words that cannot be used as
variable names, function names, or any other identifiers:

- *and* :: A logical operator
- *as* :: To create an alias
- *assert* :: For debugging
- *break* :: To break out of a loop
- *class* :: To define a class
- *continue* :: To continue to the next iteration of a loop
- *def* :: To define a function
- *del* :: To delete an object
- *elif* :: Used in conditional statements, same as else if
- *else* :: Used in conditional statements
- *except* :: Used with exceptions, what to do when an exception occurs
- *False* :: Boolean value, result of comparison operations
- *finally* :: Used with exceptions, a block of code that will be executed
  no matter if there is an exception or not
- *for* :: To create a for loop
- *from* :: To import specific parts of a module
- *global* :: To declare a global variable
- *if* :: To make a conditional statement
- *import* :: To import a module
- *in* :: To check if a value is present in a list, tuple, etc.
- *is* :: To test if two variables are equal
- *lambda* :: To create an anonymous function
- *None* :: Represents a null value
- *nonlocal* :: To declare a non-local variable
- *not* :: A logical operator
- *or* :: A logical operator
- *pass* :: A null statement, a statement that will do nothing
- *raise* :: To raise an exception
- *return* :: To exit a function and return a value
- *True* :: Boolean value, result of comparison operations
- *try* :: To make a try...except statement
- *while* :: To create a while loop
- *with* :: Used to simplify exception handling
- *yield* :: To end a function, returns a generator

* Methods

Python contains python methods much like one would expect in an object oriented
programming language.

** List Methods

- *append()* :: Adds an element at the end of the list
- *clear()* :: Removes all the elements from the list
- *copy()* :: Returns a copy of the list
- *count()* :: Returns the number of elements with the specified value
- *extend()* :: Add the elements of a list (or any iterable), to the end
  of the current list
- *index()* :: Returns the index of the first element with the specified
  value
- *insert()* :: Adds an element at the specified position
- *pop()* :: Removes the element at the specified position
- *remove()* :: Removes the item with the specified value
- *reverse()* :: Reverses the order of the list
- *sort()* :: Sorts the list

** String Methods
:PROPERTIES:
:ID:       f943b0db-5b9b-46aa-91bc-691cb5f90c86
:END:

- *capitalize()* :: Converts the first character to upper case
- *casefold()* :: Converts string into lower case
- *center()* :: Returns a centered string
- *count()* :: Returns the number of times a specified value occurs in a
  string
- *encode()* :: Returns an encoded version of the string
- *endswith()* :: Returns true if the string ends with the specified value
- *expandtabs()* :: Sets the tab size of the string
- *find()* :: Searches the string for a specified value and returns the
  position of where it was found
- *format()* :: Formats specified values in a string
- *format_map()* :: Formats specified values in a string
- *index()* :: Searches the string for a specified value and returns the
  position of where it was found
- *isalnum()* :: Returns True if all characters in the string are
  alphanumeric
- *isalpha()* :: Returns True if all characters in the string are in the
  alphabet
- *isdecimal()* :: Returns True if all characters in the string are
  decimals
- *isdigit()* :: Returns True if all characters in the string are digits
- *isidentifier()* :: Returns True if the string is an identifier
- *islower()* :: Returns True if all characters in the string are lower
  case
- *isnumeric()* :: Returns True if all characters in the string are
  numeric
- *isprintable()* :: Returns True if all characters in the string are
  printable
- *isspace()* :: Returns True if all characters in the string are
  whitespaces
- *istitle()* :: Returns True if the string follows the rules of a title
- *isupper()* :: Returns True if all characters in the string are upper
  case
- *join()* :: Joins the elements of an iterable to the end of the string
- *ljust()* :: Returns a left justified version of the string
- *lower()* :: Converts a string into lower case
- *lstrip()* :: Returns a left trim version of the string
- *maketrans()* :: Returns a translation table to be used in translations
- *partition()* :: Returns a tuple where the string is parted into three
  parts
- *replace()* :: Returns a string where a specified value is replaced with
  a specified value
- *rfind()* :: Searches the string for a specified value and returns the
  last position of where it was found
- *rindex()* :: Searches the string for a specified value and returns the
  last position of where it was found
- *rjust()* :: Returns a right justified version of the string
- *rpartition()* :: Returns a tuple where the string is parted into three
  parts
- *rsplit()* :: Splits the string at the specified separator, and returns
  a list
- *rstrip()* :: Returns a right trim version of the string
- *split()* :: Splits the string at the specified separator, and returns a
  list
- *splitlines()* :: Splits the string at line breaks and returns a list
- *startswith()* :: Returns true if the string starts with the specified
  value
- *strip()* :: Returns a trimmed version of the string
- *swapcase()* :: Swaps cases, lower case becomes upper case and vice
  versa
- *title()* :: Converts the first character of each word to upper case
- *translate()* :: Returns a translated string
- *upper()* :: Converts a string into upper case
- *zfill()* :: Fills the string with a specified number of 0 values at the
  beginning

