#+title: basic charting
#+author: nick martin
#+email: nmartin84@gmail.com
#+source: https://www.coursera.org/learn/python-plotting/lecture/bQ4Ld/matplotlib-architecture
#+roam_tags: python charts
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://raw.githack.com/nmartin84/raw-files/master/htmlpro.css" />
#+OPTIONS: toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil

* Matplotlib Architecture

There are a few layers which you can run into when dealing with matplotlib:
+ backend layer :: deals with the rendering of plots to screen or files & in
  jupyter notebook we use the inline backend.
+ artisitic layer :: contains containers such as figures, subplot and axes; as
  well as primitves, such as line 2D and Rectangle, and collections, such as a
  PathCollection.
+ scripting layer :: the scripting layer in this course is called ~pyplot~,
  simplifies access to the artist and backend layers.

Another thing we should consider are the procedural and declarative
visualization libraries, and user interfaces.
+ procedural :: in that we tell it what actions we want it to take (pyplot is
  procedural)
+ declarative :: is more of a cookie cutter, or a DOM such as with html. D3.js
  is another declarative library.

** How does it work?

The top-level matplotlib object that contains and manages all of the elements in
a given graphic is called the ~Figure~. One of the core architectural tasks
matplotlib must solve is implementing a framework for representing and
manipulating the Figure that is segregated from the act of rendering the Figure
to a user interface window or hardcopy. This enables us to build increasingly
sophisticated features and logic into the Figures, while keeping the "backends",
or output devices, relatively simple. matplotlib encapsulates not just the
drawing interfaces to allow rendering to multiple devices, but also the basic
event handling and windowing of most popular user interface toolkits. Because of
this, users can create fairly rich interactive graphics and toolkits
incorporating mouse and keyboard input that can be plugged without modification
into the six user interface toolkits we support.

The architecture to accomplish this is logically separated into three layers,
which can be viewed as a stack. Each layer that sits above another layer knows
how to talk to the layer below it, but the lower layer is not aware of the
layers above it. The three layers from bottom to top are: backend, artist, and
scripting.

** What are the backend layers?

At the bottom of the stack is the backend layer, which provides concrete
implementations of the abstract interface classes:

FigureCanvas encapsulates the concept of a surface to draw onto (e.g. "the
paper"). Renderer does the drawing (e.g."the paintbrush"). Event handles user
inputs such as keyboard and mouse events. For a user interface toolkit such as
Qt, the FigureCanvas has a concrete implementation which knows how to insert
itself into a native Qt window (QtGui.QMainWindow), transfer the matplotlib
Renderer commands onto the canvas (QtGui.QPainter), and translate native Qt
events into the matplotlib Event framework, which signals the callback
dispatcher to generate the events so upstream listeners can handle them. The
abstract base classes reside in matplotlib.backend_bases and all of the derived
classes live in dedicated modules like matplotlib.backends.backend_qt4agg. For a
pure image backend dedicated to producing hardcopy output like PDF, PNG, SVG, or
PS, the FigureCanvas implementation might simply set up a file-like object into
which the default headers, fonts, and macro functions are defined, as well as
the individual objects (lines, text, rectangles, etc.) that the Renderer
creates.

The job of the Renderer is to provide a low-level drawing interface for putting
ink onto the canvas. As mentioned above, the original matplotlib application was
an ECoG viewer in a GTK+ application, and much of the original design was
inspired by the GDK/GTK+ API available at that time. The original Renderer API
was motivated by the GDK Drawable interface, which implements such primitive
methods as draw_point, draw_line, draw_rectangle, draw_image, draw_polygon, and
draw_glyphs. Each additional backend we implemented—the earliest were the
PostScript backend and the GD backend—implemented the GDK Drawable API and
translated these into native backend-dependent drawing commands. As we discuss
below, this unnecessarily complicated the implementation of new backends with a
large proliferation of methods, and this API has subsequently been dramatically
simplified, resulting in a simple process for porting matplotlib to a new user
interface toolkit or file specification.

The matplotlib Event framework maps underlying UI events like key-press-event or
mouse-motion-event to the matplotlib classes KeyEvent or MouseEvent. Users can
connect to these events to callback functions and interact with their figure and
data; for example, to pick a data point or group of points, or manipulate some
aspect of the figure or its constituents. The following code sample illustrates
how to toggle all of the lines in an Axes window when the user types `t'.

* Ten Simple Rules for Better Figures

** Rule 1: Know your audience

It is important to identify, as early as possible in the design process, the
audience and the message the visual is to convey.

** Rule 2: Identify your message

Your chart is meant to deliver a message of intent, that would sometimes be more
difficult or event impossible to explain in words.

** Rule 3: Adapt the figure to match the medium

The medium being; the viewer may see it on their computer, in a journal, from
their phone, in a presentation... And we should adapt our figure to match the
medium to take into consideration such as; during presentations you should focus
on minimal detail, make the data more obvious, less distractiosn or
de-cluttered. Mean while on a computer you can make it more detailed.

** Rule 4: Captions are not optional

You should always include captions, and the captions should explain how to read
the data and additional representation of the graph.

** Rule 5: Do not trust the Defaults

Obviously the defaults do not apply to everything, so you should look at each
styling option and thing that's on your plot and consider if it should be there,
how it should be where.
** Rule 6: Use Color Effectively

For example, to highlight some element of a figure, you can use color for this
element while keeping other elements gray or black. This provides an enhancing
effect. However, if you have no such need, you need to ask yourself, “Is there
any reason this plot is blue and not black?”

** Rule 7: Do not Mislead the Reader

What distinguishes a scientific figure from other graphical artwork is the
presence of data that needs to be shown as objectively as possible. A scientific
figure is, by definition, tied to the data (be it an experimental setup, a
model, or some results) and if you loosen this tie, you may unintentionally
project a different message than intended. However, representing results
objectively is not always straightforward. For example, a number of implicit
choices made by the library or software you're using that are meant to be
accurate in most situations may also mislead the viewer under certain
circumstances.

** Rule 8: Avoid "Chartjunk"

Chartjunk refers to all the unnecessary or confusing visual elements found in a
figure that do not improve the message (in the best case) or add confusion (in
the worst case). For example, chartjunk may include the use of too many colors,
too many labels, gratuitously colored backgrounds, useless grid lines, etc.

** Rule 9: Message Trumps Beauty

Figures have been used in scientific literature since antiquity. Over the years,
a lot of progress has been made, and each scientific domain has developed its
own set of best practices. It is important to know these standards, because they
facilitate a more direct comparison between models, studies, or experiments.
More importantly, they can help you to spot obvious errors in your results.
However, most of the time, you may need to design a brand-new figure, because
there is no standard way of describing your research.

** Rule 10: Get the Right Tool

There exist many tools that can make your life easier when creating figures, and
knowing a few of them can save you a lot of time. Depending on the type of
visual you're trying to create, there is generally a dedicated tool that will do
what you're trying to achieve. It is important to understand at this point that
the software or library you're using to make a visualization can be different
from the software or library you're using to conduct your research and/or
analyze your data. You can always export data in order to use it in another
tool. Whether drawing a graph, designing a schema of your experiment, or
plotting some data, there are open-source tools for you. They're just waiting to
be found and used. Below is a small list of open-source tools.

Matplotlib is a python plotting library, primarily for 2-D plotting, but with
some 3-D support, which produces publication-quality figures in a variety of
hardcopy formats and interactive environments across platforms. It comes with a
huge gallery of examples that cover virtually all scientific domains
(http://matplotlib.org/gallery.html).

R is a language and environment for statistical computing and graphics. R
provides a wide variety of statistical (linear and nonlinear modeling, classical
statistical tests, time-series analysis, classification, clustering, etc.) and
graphical techniques, and is highly extensible.

Inkscape is a professional vector graphics editor. It allows you to design
complex figures and can be used, for example, to improve a script-generated
figure or to read a PDF file in order to extract figures and transform them any
way you like.

TikZ and PGF are TeX packages for creating graphics programmatically. TikZ is
built on top of PGF and allows you to create sophisticated graphics in a rather
intuitive and easy manner, as shown by the Tikz gallery
(http://www.texample.net/tikz/examples/all/).

GIMP is the GNU Image Manipulation Program. It is an application for such tasks
as photo retouching, image composition, and image authoring. If you need to
quickly retouch an image or add some legends or labels, GIMP is the perfect
tool.

ImageMagick is a software suite to create, edit, compose, or convert bitmap
images from the command line. It can be used to quickly convert an image into
another format, and the huge script gallery
(http://www.fmwconcepts.com/imagemagick/index.php) by Fred Weinhaus will provide
virtually any effect you might want to achieve.

D3.js (or just D3 for Data-Driven Documents) is a JavaScript library that offers
an easy way to create and control interactive data-based graphical forms which
run in web browsers, as shown in the gallery at
http://github.com/mbostock/d3/wiki/Gallery.

Cytoscape is a software platform for visualizing complex networks and
integrating these with any type of attribute data. If your data or results are
very complex, cytoscape may help you alleviate this complexity.

Circos was originally designed for visualizing genomic data but can create
figures from data in any field. Circos is useful if you have data that describes
relationships or multilayered annotations of one or more scales.
* Basic Plotting with Matplotlib

- pyplot will return the current figure with the function ~gcf()~.
- pyplot will return return current axis with the function ~gca()~.

** Building a basic plot

So when using the plot command, an important thing to note is that it can accept
any number of arguments, but generally speaking the arguments should be grouped
in pairs of "x,y" or "x,y and string". The string being how we want our data to
be rendered.

#+begin_src jupyter-python :file basic-barplot.svg :session py :results raw :exports both
%matplotlib inline
%config InlineBackend.figure_format = 'svg'
import matplotlib.pyplot as plt
import numpy as np
a = plt.hist(np.random.randn(1000), bins=20)
#+end_src

#+RESULTS:
[[file:basic-barplot.svg]]


#+begin_src jupyter-python :session py :results output graphics :exports both :file basic_plot.svg
%matplotlib inline
import matplotlib.pyplot as plt
plt.plot(3, 2)
#+end_src

#+RESULTS:
[[file:basic_plot.svg]]

Here we are passing in the '.' as our 3rd argument, the string, which is telling
plot how to render our data.
#+begin_src jupyter-python :session py :results output graphics :exports both :file basic_plot_wdot.svg
%matplotlib inline
import matplotlib.pyplot as plt
plt.plot(3, 2, '.')
#+end_src

#+RESULTS:
[[file:basic_plot_wdot.svg]]

In this instance, we can set the "x", "y" axies ranges with the axis() function.
#+begin_src jupyter-python :session py :results output graphics :exports both
%matplotlib inline
import matplotlib.pyplot as plt

plt.figure()
plt.plot(1.5, 1.5, 'o')
plt.plot(2, 2, 'o')
plt.plot(2.5, 2.5, 'o')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/72d683472cc13e20c8997ebd2c0e19493397d443.svg]]

#+begin_src jupyter-python :session py :results output graphics :exports both :file basic_plot_backendagg.svg
%matplotlib inline
import matplotlib.pyplot as plt

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)

# the histogram of the data
n, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)


plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(False)
plt.show()
#+end_src

#+RESULTS:
[[file:basic_plot_backendagg.svg]]
** Scatterplots

Scatterplots, well we know what those are... Nifty little diagrams eh?

#+begin_src jupyter-python :session py :results output graphics :exports both
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

x = np.array([1,2,3,4,5,6,7,8])
y = x

colors = ['green']*(len(x)-1)
colors.append('red')

plt.figure()
plt.scatter(x, y, s=100, c=colors)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/278cc26cf3b91cf809e32af7155eda955fbaaba8.svg]]

Seperation of data points into lists which described them as components is a
pretty common pattern in matplotlib.

Two other importhing things to make note of is the ~zip()~ function and [[[[file:../../../python/20210111200604-list-unpacking.org][list
unpacking]]]]. It's also good to know that zip is a [[[[file:../../../python/20210111201844-generator.org][generator]]]] in python3,
which means we need to use the list function if we want to see the results with
iterating over zip. Also in reference to the code block below, the ~*~ when passed
to the zip function will tell it to unpack those results back into the variables
you pass.
- The zip function takes a number of iterables, and creates tuples out of them,
  matching elements based on index.

#+begin_src jupyter-python :session py :results output graphics :exports both
import numpy as np
import matplotlib.pyplot as plt

zip_generator=zip([1,2,3,4,5], [6,7,8,9,10])

x,y = zip(*zip_generator)
print(x)
print(y)
#+end_src

#+RESULTS:
: (1, 2, 3, 4, 5)
: (6, 7, 8, 9, 10)

In this next piece, we'll take for example how we can assign color based on
certain conditions in our arguments.
#+begin_src jupyter-python :session py :results output graphics :exports both :file scatter-colorsettings.svg
import matplotlib.pyplot as plt
%matplotlib inline

plt.figure()
plt.scatter(x[:2], y[:2], s=100, c='red', label='Tall students')
plt.scatter(x[2:], y[2:], s=100, c='blue', label='Short students')
plt.xlabel('the number of times the child kicked a ball')
plt.ylabel('the grade of the student')
plt.title('Relationship between ball kicking and grades')
plt.legend()
#+end_src

#+RESULTS:
[[file:scatter-colorsettings.svg]]
** Lineplots

Only y axis are given, no x axis. The lineplot knows how to handle it. Second
the lineplot is smart enough to know we are comparing two data sets, and colors
them appropriately.

We can also use --r to use dashes, instead of lines.

#+begin_src jupyter-python :session py :results output graphics :exports both :file lineplot-basic.svg
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

linear_data = np.array([1,2,3,4,5,6,7,8])
quadratic_data = linear_data**2

plt.figure()
plt.plot(linear_data, '-o', quadratic_data, '-o')
plt.plot([22,44,55], '--r')
plt.xlabel('Some data')
plt.ylabel('Some other data')
plt.title('A Title')
plt.legend(['Baseline', 'Competition', 'Us'])
plt.gca().fill_between(range(len(linear_data)), linear_data, quadratic_data, facecolor='blue', alpha=0.25)
#+end_src

#+RESULTS:
[[file:lineplot-basic.svg]]

And here we are going to add some dates to the mixture:

#+begin_src jupyter-python :session py :results output graphics :exports both :file lineplot-basic-dates.png
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
%matplotlib inline

linear_data = np.array([1,2,3,4,5,6,7,8])
quadratic_data = linear_data**2

observation_dates = np.arange('2017-01-01', '2017-01-09', dtype='datetime64[D]')
observation_dates = list(map(pd.to_datetime, observation_dates))
plt.xlabel('Some data')
plt.ylabel('Some other data')
plt.title('A Title')
plt.legend(['Baseline', 'Competition', 'Us'])
plt.plot(observation_dates, linear_data, '-o', observation_dates, quadratic_data, '-o')
x = plt.gca().xaxis
for item in x.get_ticklabels():
    item.set_rotation(45)
#+end_src

#+RESULTS:
[[file:lineplot-basic-dates.png]]
** Bar Charts

#+begin_src jupyter-python :session py :results output graphics :exports both :file barchart-basics.png
import matplotlib.pyplot as plt
from random import randint
%matplotlib inline

linear_data = np.array([1,2,3,4,5,6,7,8])
quadratic_data = linear_data**2

xvals=range(len(linear_data))
plt.bar(xvals,linear_data, width=0.3, color='blue')

new_xvals= []
for item in xvals:
    new_xvals.append(item+0.3)

plt.bar(new_xvals, quadratic_data, width=0.3, color='red')
linear_err=[randint(0,15) for x in range(len(linear_data))]
plt.bar(xvals, linear_data, width=0.3, yerr=linear_err)
#+end_src
TODO: Define what ~yerr~ is.

#+RESULTS:
[[file:barchart-basics.png]]

You could also do a stacked barchart by specifying ~bottom=value~ in your plot
function:
#+begin_src jupyter-python :session py :results output graphics :exports both :file barchart-basics-stacked.png
import matplotlib.pyplot as plt
from random import randint
%matplotlib inline

linear_data = np.array([1,2,3,4,5,6,7,8])
quadratic_data = linear_data**2

xvals=range(len(linear_data))
plt.bar(xvals,linear_data, width=0.3, color='blue')

new_xvals= []
for item in xvals:
    new_xvals.append(item+0.3)

plt.bar(xvals, quadratic_data, width=0.3, bottom=linear_data,   color='r')
#+end_src

#+RESULTS:
[[file:barchart-basics-stacked.png]]

In this example, we will convert our barchart into a horizontal chart by
specifying the function ~plt.barh()~.
#+begin_src jupyter-python :session py :results output graphics :exports both :file barchart-hor-basics-stacked.png
import matplotlib.pyplot as plt
from random import randint
%matplotlib inline

linear_data = np.array([1,2,3,4,5,6,7,8])
quadratic_data = linear_data**2

xvals=range(len(linear_data))
plt.barh(xvals,linear_data, height=0.3, color='blue')

new_xvals= []
for item in xvals:
    new_xvals.append(item+0.3)

plt.barh(xvals, quadratic_data, height=0.3, left=linear_data, color='r')
#+end_src

#+RESULTS:
[[file:barchart-hor-basics-stacked.png]]
