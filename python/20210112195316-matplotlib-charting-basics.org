#+title: matplotlib charting basics
#+author: nick martin
#+email: nmartin84@gmail.com
#+source: https://matplotlib.org/3.3.3/tutorials/index.html
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://raw.githack.com/nmartin84/raw-files/master/htmlpro.css" />
#+OPTIONS: toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil

* Basics or getting started with Matplotlib

Matplotlib graphs your data on what are called [[[[file:202101121954-figures.org][figures]]]] (ie: windows, jupyter
widgets, etc), each of which can contain one or more [[[[file:202101121955-axes.org][axes]]]] (ie: one or more
points where points can be specified in terms of x-y coordinates).

#+begin_src jupyter-python :session py :results output graphics :exports both
import matplotlib.pyplot as plt
%matplotlib inline

fig, ax = plt.subplots()
ax.plot([1,2,3,4], [1,4,2,3])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8cecb7cbff8ea69340fe0fb40906f1dbbbfa161e.png]]

** Breakdown of what makes up the plotting diagram

[[file:../.attach/matplotlib_helper.png]]

*** Figure:
  The whole figure. The figure keeps track of all the child Axes, a smattering
  of 'special' artists (titles, figure legends, etc), and the canvas.  (Don't
  worry too much about the canvas, it is crucial as it is the object that actually
  does the drawing to get you your plot, but as the user it is more-or-less
  invisible to you). A figure can contain any number of Axes, but will typically
  have at least one.

*** Axes:
  This is what you think of as 'a plot', it is the region of the image with
  the data space. A given figure can contain many Axes, but a given Axes object
  can only be in one Figure. The Axes contains two (or three in the case of 3D)
  Axis objects (be aware of the difference between Axes and Axis) which take care
  of the data limits (the data limits can also be controlled via the
  axes.Axes.set_xlim() and axes.Axes.set_ylim() methods). Each Axes has a title
  (set via set_title()), an x-label (set via set_xlabel()), and a y-label set via
  set_ylabel()).

  The Axes class and its member functions are the primary entry point to working
  with the OO interface.

*** Axis:
  These are the number-line-like objects. They take care of setting the graph
  limits and generating the ticks (the marks on the axis) and ticklabels (strings
  labeling the ticks). The location of the ticks is determined by a Locator object
  and the ticklabel strings are formatted by a Formatter. The combination of the
  correct Locator and Formatter gives very fine control over the tick locations
  and labels.

*** Artist:
  Basically everything you can see on the figure is an artist (even the
  Figure, Axes, and Axis objects). This includes Text objects, Line2D objects,
  collections objects, Patch objects ... (you get the idea). When the figure is
  rendered, all of the artists are drawn to the canvas. Most Artists are tied to
  an Axes; such an Artist cannot be shared by multiple Axes, or moved from one to
  another.

** Types of Inputs to Plotting Functions
All of plotting functions expect ~numpy.array~ or ~numpy.ma.masked_array~ as input.
Classes that are 'array-like' such as pandas data objects and numpy.matrix may
or may not work as intended. It is best to convert these to numpy.array objects
prior to plotting.

To convert a Pandas DataFrame:
#+begin_example
a = pandas.DataFrame(np.random.rand(4, 5), columns = list('abcde'))
a_asarray = a.values
#+end_example

And to convert a numpy.matrix
#+begin_example
b = np.matrix([[1, 2], [3, 4]])
b_asarray = np.asarray(b)
#+end_example


*** OO Style
#+begin_src jupyter-python :session py :results output graphics :exports both :file simpleplot.png
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline
x = np.linspace(0, 2, 100)

# Note that even in the OO-style, we use `.pyplot.figure` to create the figure.
fig, ax = plt.subplots()  # Create a figure and an axes.
ax.plot(x, x, label='linear')  # Plot some data on the axes.
ax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...
ax.plot(x, x**3, label='cubic')  # ... and some more.
ax.set_xlabel('x label')  # Add an x-label to the axes.
ax.set_ylabel('y label')  # Add a y-label to the axes.
ax.set_title("Simple Plot")  # Add a title to the axes.
ax.legend()  # Add a legend.
#+end_src

#+RESULTS:
[[file:simpleplot.png]]

*** Pyplot Style

#+begin_src jupyter-python :session py :results output graphics :exports both :file simplt-pyplot.png
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline
x = np.linspace(0, 2, 100)

plt.plot(x, x, label='linear')  # Plot some data on the (implicit) axes.
plt.plot(x, x**2, label='quadratic')  # etc.
plt.plot(x, x**3, label='cubic')
plt.xlabel('x label')
plt.ylabel('y label')
plt.title("Simple Plot")
plt.legend()
#+end_src

#+RESULTS:
[[file:simplt-pyplot.png]]

There's a third example, which uses another way to embed diagrams into graphical
user interfaces. More details can be found -> [[https://matplotlib.org/3.3.3/gallery/index.html#user-interfaces][here]]

*** Functions to build plots
Here's a method of which one can define a function to build their plots:

#+begin_src jupyter-python :session py :results output graphics :exports both :file pyplot-function.png
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline

def my_plotter(ax, data1, data2, param_dict):
    """
    A helper function to make a graph

    Parameters
    ----------
    ax : Axes
        The axes to draw to

    data1 : array
       The x data

    data2 : array
       The y data

    param_dict : dict
       Dictionary of kwargs to pass to ax.plot

    Returns
    -------
    out : list
        list of artists added
    """
    out = ax.plot(data1, data2, **param_dict)
    return out

fig, (ax1, ax2) = plt.subplots(1, 2)
my_plotter(ax1, data1, data2, {'marker': 'x'})
my_plotter(ax2, data3, data4, {'marker': 'o'})
#+end_src

#+RESULTS:
[[file:pyplot-function.png]]

** Backends

So matplotlib can be served up in many formats, for instance in your jupyter
notebook, in web applications, embeded in GUI applications, or interactively at
the python shell. To support all these use-cases, matplotlib supports multiple
outputs which are referrred to the backend. The "frontend" is the code, or
plotting code, and the "backend" is where the hardwork takes place.

*** Selecting a backend

There are three ways to configure your backend. *NOTE:* If you configure multiple
options, the last option in the list will supercede the others above it.
1. The ~rcParams["backend"]~ parameter in your matplotlibrc file.
2. The ~MPLBACKEND~ environment variable.
3. The function ~matplotlib.use()~.

For anything else beyond this, please take a look at the rest of what this page
has to offer. [[https://matplotlib.org/3.3.3/tutorials/introductory/usage.html#sphx-glr-tutorials-introductory-usage-py][link]]

**** Configuring rcParams

In your matploblibrc file:
#+begin_example
backend : qt5agg   # use pyqt5 with antigrain (agg) rendering
#+end_example

See also [[https://matplotlib.org/3.3.3/tutorials/introductory/customizing.html][Customizing Matplotlib with style sheets and rcParams]].

**** Setting the MPLBACKEND environment variable

You can set environment variable either for your current shell or for a single
script:

#+begin_example
> export MPLBACKEND=qt5agg
> python simple_plot.py

> MPLBACKEND=qt5agg python simple_plot.py
#+end_example

For windows:
#+begin_example
> set MPLBACKEND=qt5agg
> python simple_plot.py
#+end_example

**** Setting backend with function ~matplotlib.use()~

This should be done before any figure is created:
#+begin_example
import matplotlib
matplotlib.use('qt5agg')
#+end_example
** What is Interactive Mode

Use of an interactive backend (see [[Backends]])
* TODO Intro to Pyplot
** The very basics with pyplot
** Formatting the style of your plot
** Plotting with keyword strings
** Plotting with Categorical variables
** Controlling Line Properties
** Working with multiple Figures and Axes
** Working with Text
*** Using Mathematical Expressions in Text
*** Annotating Text
** Logarithmic and other nonlinear axes
* TODO Sample Plots
** Line plot
** Multiple Subplots in one Figure
** Images
** Contouring and pseudocolor
** Histograms
** Paths
** Three-Dimensional plotting
** Streamplot
** Ellipses
** Bar Charts
** Pie Charts
** Tables
** Scatter plots
** GUI Widgets
** Filled Curves
** Data Handling
** Log Plots
** Polar Plots
** Legends
** TeX-Notation for text objects
** Native TeX Rendering
** EEG GUI
** XKCD-style sketch plots
** Subplot Example
* TODO Image Tutorial
** Startup Commands
** Importing Image Data into Numpy Arrays
** Plotting Numpy arrays as images
** Examining a specific data range
** Array Interpolation schemes
* TODO The Lifecycle of a Plot
* TODO Customizing Matplotlib with Stylesheets and rcParams
